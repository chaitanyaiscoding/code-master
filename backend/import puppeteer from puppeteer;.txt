import puppeteer from "puppeteer";
import mongoose from "mongoose";
import dotenv from "dotenv";
import Question from "./models/Question.js";

dotenv.config();

// Connect to the new MongoDB database: cf_cc_questions
mongoose
  .connect(process.env.MONGO_URI, { dbName: "cf_cc_questions" }) // Updated to use the new database
  .then(() => console.log("✅ Connected to MongoDB: cf_cc_questions"))
  .catch((err) => console.error("❌ MongoDB Connection Error:", err));

// ---------- Codeforces Scraper ----------
async function scrapeCodeforces() {
  console.log("🔍 Fetching Codeforces problems...");

  try {
    const response = await fetch("https://codeforces.com/api/problemset.problems");
    const data = await response.json();

    if (data.status !== "OK") {
      throw new Error("Failed to fetch Codeforces problems.");
    }

    const problems = data.result.problems.map((problem) => ({
      title: problem.name,
      url: `https://codeforces.com/problemset/problem/${problem.contestId}/${problem.index}`,
      difficulty: problem.rating || "N/A",
      topic: problem.tags.length > 0 ? problem.tags.join(", ") : "Unknown",
      source: "Codeforces", // ✅ Ensuring source is included
    }));

    console.log("🔍 First 5 Codeforces problems:", problems.slice(0, 5));

    if (problems.length > 0) {
      await Question.insertMany(problems);
      console.log(`✅ Successfully stored ${problems.length} Codeforces problems.`);
    } else {
      console.log("❌ No Codeforces problems found.");
    }
  } catch (error) {
    console.error(`❌ Codeforces Scraping Error: ${error.message}`);
  }
}

// ---------- CodeChef Scraper ----------
const baseUrl = "https://www.codechef.com/practice-old/topics/";

async function scrapeCodeChef() {
  const browser = await puppeteer.launch({ headless: false });
  const page = await browser.newPage();

  try {
    console.log("🔍 Fetching available CodeChef topics...");
    await page.goto(baseUrl, { waitUntil: "domcontentloaded" });
    await page.waitForSelector(
      '#vertical-tab-panel-0 div.MuiFormControl-root label span.MuiTypography-root',
      { timeout: 15000 }
    );

    const topics = await page.evaluate(() => {
      return Array.from(
        document.querySelectorAll(
          '#vertical-tab-panel-0 div.MuiFormControl-root label span.MuiTypography-root'
        )
      ).map((el) => el.innerText.trim().toLowerCase().replace(/\s+/g, "-"));
    });

    console.log(`✅ Found ${topics.length} topics:`, topics);

    for (let topic of topics) {
      console.log(`🔍 Scraping topic: ${topic}`);
      await page.goto(`${baseUrl}${topic}`, { waitUntil: "domcontentloaded" });

      try {
        await page.waitForSelector("td.MuiTableCell-root div._tableCell__link_14me2_257", { timeout: 15000 });

        const problems = await page.evaluate((topic) => {
          return Array.from(
            document.querySelectorAll("td.MuiTableCell-root div._tableCell__link_14me2_257")
          )
            .map((el) => {
              const row = el.closest("tr");
              const difficultyElement = row ? row.querySelector("td:nth-child(3) > div") : null;
              const difficulty = difficultyElement ? difficultyElement.innerText.trim() : "N/A";
              const title = el.innerText.trim();
              const url = `https://www.codechef.com/problems/${title}`; // ✅ Fixed the URL format
              return { title, url, difficulty, topic, source: "CodeChef" }; // ✅ Ensuring source is included
            })
            .filter((problem) => problem.title);
        }, topic);

        console.log(`✅ Found ${problems.length} problems for topic: ${topic}`);

        if (problems.length > 0) {
          await Question.insertMany(problems);
          console.log(`📌 Stored ${problems.length} CodeChef problems in MongoDB.`);
        }
      } catch (error) {
        console.error(`❌ Skipping topic ${topic} due to error: ${error.message}`);
      }
    }
  } catch (error) {
    console.error("❌ CodeChef Scraping Error:", error);
  } finally {
    await browser.close();
  }
}

// ---------- Main Function ----------
async function main() {
  await scrapeCodeforces();
  await scrapeCodeChef();

  mongoose.connection.close();
  console.log("✅ Scraping Complete. MongoDB Connection Closed.");
}

main();
scraper .js
_______________________________________________________________________________________________________________________________
import React, { useState } from "react";

const Search = () => {
  const [topic, setTopic] = useState("");
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleSearch = async () => {
    if (!topic) return;
    setLoading(true);
    setError(null);

    try {
      const response = await fetch(`http://localhost:5000/api/search?topic=${encodeURIComponent(topic)}`);
      const data = await response.json();
      setResults(data);
    } catch (error) {
      console.error("Error fetching data:", error);
      setError("Failed to fetch problems. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h2>Search Problems from CodeChef & Codeforces</h2>
      <input
        type="text"
        value={topic}
        onChange={(e) => setTopic(e.target.value)}
        placeholder="Enter topic..."
      />
      <button onClick={handleSearch} disabled={loading}>
        {loading ? "Searching..." : "Search"}
      </button>

      {error && <p style={{ color: "red" }}>{error}</p>}

      <ul>
        {results.map((question, index) => (
          <li key={index}>
            <a href={question.url} target="_blank" rel="noopener noreferrer">
              {question.title} - {question.difficulty} <strong>({question.source})</strong>
            </a>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Search;
search.jsx
________________________________________________________________________________________________
import express from "express";
import mongoose from "mongoose";
import cors from "cors";
import dotenv from "dotenv";
import Question from "./models/Question.js"; // Ensure the correct model path

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

// ✅ Connect to MongoDB and specify the database name
mongoose.connect(process.env.MONGO_URI, { dbName: "cf_cc_questions" })
  .then(() => console.log("✅ Connected to MongoDB: cf_cc_questions"))
  .catch((err) => console.error("❌ MongoDB Connection Error:", err));

// ✅ Search API Route
app.get("/api/search", async (req, res) => {
  const { topic } = req.query;
  if (!topic) {
    return res.status(400).json({ error: "Topic is required" });
  }

  try {
    const questions = await Question.find({
      topic: { $regex: new RegExp(topic, "i") }, // Case-insensitive search
    });

    if (questions.length === 0) {
      return res.status(404).json({ error: "No questions found for this topic" });
    }

    res.json(questions);
  } catch (error) {
    console.error("❌ Server Error:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
server.js